{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/fullstackopen/part_7/bloglist/frontend_bloglist/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notifyUser } from './reducers/notificationReducer';\nimport Blog from './components/Blog';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport BlogForm from './components/BlogForm';\nimport Togglable from './components/Togglable';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [notification, setNotification] = useState({\n    message: null,\n    isSuccessful: true\n  });\n  const notificationState = useSelector(state => state);\n  const dispatch = useDispatch();\n  console.log(notificationState);\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, []);\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []); // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n\n  const handleLogin = async userObject => {\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login(userObject); // Save token in local storage\n\n      window.localStorage.setItem('loggedUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n    } catch (exception) {\n      setNotification({\n        message: 'Wrong credentials',\n        isSuccessful: false\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    }\n  };\n\n  const addBlog = async newBlog => {\n    console.log('user', user);\n    console.log('newBlog', newBlog);\n\n    try {\n      const returnedBlog = await blogService.create(newBlog);\n      setBlogs(blogs.concat(returnedBlog));\n      blogFormRef.current.toggleVisibility();\n      dispatch(notifyUser({\n        message: `A new blog: ${newBlog.title} by ${newBlog.author}`,\n        isSuccessful: true\n      }));\n      setTimeout(() => {\n        dispatch(notifyUser({\n          message: null,\n          isSuccessful: true\n        }));\n      }, 5000);\n    } catch (exception) {\n      console.log(exception);\n      dispatch(notifyUser({\n        message: `Something is wrong, ${exception}`,\n        isSuccessful: false\n      }));\n      setTimeout(() => {\n        dispatch(notifyUser({\n          message: null,\n          isSuccessful: true\n        }));\n      }, 5000);\n    }\n  }; //The useRef hook is used to create a blogFormRef ref, \n  // that is assigned to the Togglable component containing the creation blog form. \n  // The blogFormRef variable acts as a reference to the component. \n  // This hook ensures the same reference (ref) is kept throughout re-renders of the component. \n\n\n  const blogFormRef = useRef();\n\n  const blogForm = () => React.createElement(Togglable, {\n    buttonLabel: \"New Blog\",\n    ref: blogFormRef,\n    id: \"new-blog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(BlogForm, {\n    createBlog: addBlog,\n    id: \"new-blog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n\n  const addLike = async blogId => {\n    const blog = blogs.find(b => b.id === blogId);\n    const updatedBlog = { ...blog,\n      likes: blog.likes + 1\n    };\n\n    try {\n      const returnedBlog = await blogService.update(blogId, updatedBlog);\n      setBlogs(blogs.map(blog => blog.id !== blogId ? blog : returnedBlog));\n    } catch (exception) {\n      console.log('error_ :', exception);\n    }\n  };\n\n  const removeBlog = async blogId => {\n    const blogToRemove = blogs.find(b => b.id === blogId);\n    console.log('blogToRemove', blogToRemove);\n\n    if (window.confirm(`Delete ${blogToRemove.title} ?`)) {\n      try {\n        await blogService.remove(blogId);\n        setBlogs(blogs.filter(b => b.id !== blogId));\n        setNotification({\n          message: `${blogToRemove.title} has been deleted`,\n          isSuccessful: true\n        });\n        setTimeout(() => {\n          setNotification({\n            message: null\n          });\n        }, 5000);\n      } catch (exception) {\n        console.log('error_ :', exception);\n        setNotification({\n          message: 'An error occured',\n          isSuccessful: false\n        });\n        setTimeout(() => {\n          setNotification({\n            message: null\n          });\n        }, 5000);\n      }\n    }\n  }; // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n\n  if (user === null) {\n    return React.createElement(React.Fragment, null, React.createElement(Notification, {\n      message: notification,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(LoginForm, {\n      handleLogin: handleLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }));\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser');\n    setUser(null);\n  };\n\n  console.log(blogs);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Notification, {\n    message: notificationState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Blogs\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, user.name, \" logged-in\"), React.createElement(\"button\", {\n    onClick: cleanCredentials,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"log out\"), blogForm(), blogs.sort((a, b) => b.likes - a.likes).map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    updateBlog: () => addLike(blog.id),\n    removeBlog: () => removeBlog(blog.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/fullstackopen/part_7/bloglist/frontend_bloglist/src/App.js"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","notifyUser","Blog","blogService","loginService","Notification","LoginForm","BlogForm","Togglable","Footer","App","blogs","setBlogs","user","setUser","notification","setNotification","message","isSuccessful","notificationState","state","dispatch","console","log","getAll","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","handleLogin","userObject","login","setItem","stringify","exception","setTimeout","addBlog","newBlog","returnedBlog","create","concat","blogFormRef","current","toggleVisibility","title","author","blogForm","addLike","blogId","blog","find","b","id","updatedBlog","likes","update","map","removeBlog","blogToRemove","confirm","remove","filter","cleanCredentials","removeItem","name","sort","a"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { notifyUser } from './reducers/notificationReducer'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\nimport Footer from './components/Footer'\n\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState({ message: null, isSuccessful: true })\n\n  const notificationState = useSelector(state => state)\n  const dispatch = useDispatch()\n\n  console.log(notificationState);\n\n  useEffect(() => {\n    blogService\n      .getAll()\n      .then(blogs => setBlogs(blogs))\n  }, [])\n\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n  const handleLogin = async (userObject) => {\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login(userObject)\n\n      // Save token in local storage\n      window.localStorage.setItem(\n        'loggedUser', JSON.stringify(user)\n      )\n\n      blogService.setToken(user.token)\n      setUser(user)\n\n    } catch (exception) {\n      setNotification({ message: 'Wrong credentials', isSuccessful: false })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    }\n  }\n\n\n  const addBlog = async (newBlog) => {\n    console.log('user', user);\n    console.log('newBlog', newBlog);\n\n    try {\n      const returnedBlog = await blogService.create(newBlog)\n\n      setBlogs(blogs.concat(returnedBlog))\n      blogFormRef.current.toggleVisibility()\n      dispatch(notifyUser({ message: `A new blog: ${newBlog.title} by ${newBlog.author}`, isSuccessful: true }))\n      setTimeout(() => {\n        dispatch(notifyUser({ message: null, isSuccessful: true }))\n      }, 5000)\n    } catch (exception) {\n      console.log(exception);\n      dispatch(notifyUser({ message: `Something is wrong, ${exception}`, isSuccessful: false }))\n      setTimeout(() => {\n        dispatch(notifyUser({ message: null, isSuccessful: true }))\n\n      }, 5000)\n    }\n\n  }\n\n  //The useRef hook is used to create a blogFormRef ref, \n  // that is assigned to the Togglable component containing the creation blog form. \n  // The blogFormRef variable acts as a reference to the component. \n  // This hook ensures the same reference (ref) is kept throughout re-renders of the component. \n\n  const blogFormRef = useRef()\n  const blogForm = () => (\n    <Togglable buttonLabel=\"New Blog\" ref={blogFormRef} id=\"new-blog\">\n      <BlogForm createBlog={addBlog} id=\"new-blog\" />\n    </Togglable>\n  )\n\n  const addLike = async (blogId) => {\n    const blog = blogs.find(b => b.id === blogId)\n    const updatedBlog = { ...blog, likes: blog.likes + 1 }\n\n    try {\n      const returnedBlog = await blogService.update(blogId, updatedBlog)\n      setBlogs(blogs.map(blog => blog.id !== blogId ? blog : returnedBlog))\n    } catch (exception) {\n      console.log('error_ :', exception)\n    }\n  }\n\n  const removeBlog = async (blogId) => {\n    const blogToRemove = blogs.find(b => b.id === blogId)\n    console.log('blogToRemove', blogToRemove);\n\n    if (window.confirm(`Delete ${blogToRemove.title} ?`)) {\n      try {\n        await blogService.remove(blogId)\n        setBlogs(blogs.filter(b => b.id !== blogId))\n        setNotification({ message: `${blogToRemove.title} has been deleted`, isSuccessful: true })\n        setTimeout(() => {\n          setNotification({ message: null })\n        }, 5000)\n      } catch (exception) {\n        console.log('error_ :', exception)\n        setNotification({ message: 'An error occured', isSuccessful: false })\n        setTimeout(() => {\n          setNotification({ message: null })\n        }, 5000)\n      }\n    }\n\n  }\n  // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n  if (user === null) {\n    return (\n      <>\n        <Notification message={notification} />\n        <LoginForm handleLogin={handleLogin} />\n        <Footer />\n      </>\n    )\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser')\n    setUser(null)\n  }\n\n  console.log(blogs)\n  return (\n    <div>\n      <Notification message={notificationState} />\n      <h2>Blogs</h2>\n      <p>{user.name} logged-in</p>\n      <button onClick={cleanCredentials}>log out</button>\n      {blogForm()}\n      {blogs\n        .sort((a, b) => b.likes - a.likes)\n        .map(blog =>\n          <Blog\n            key={blog.id}\n            blog={blog}\n            updateBlog={() => addLike(blog.id)}\n            removeBlog={() => removeBlog(blog.id)}\n          />\n        )}\n      <Footer />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}