{"version":3,"sources":["components/DisplayContact.js","components/Filter.js","components/PersonForm.js","services/personsService.js","components/Notification.js","App.js","index.js"],"names":["DisplayContact","persons","removeContact","map","person","key","id","name","number","type","value","onClick","Filter","showFilter","handleFilter","onChange","PersonForm","addContact","newName","handleNewName","newNumber","handleNewNumber","onSubmit","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","isSuccessful","className","App","useState","setPersons","setNewName","setNewNumber","setShowFilter","notification","setNotification","setSuccess","useEffect","personsService","dbData","contactsToShow","filter","contact","toLowerCase","includes","event","target","preventDefault","contactObj","isNameDuplicate","found","find","element","length","window","confirm","returnedContact","setTimeout","catch","err","console","log","error","concat","JSON","stringify","deleteThis","outcome","ReactDOM","render","document","getElementById"],"mappings":"iOAmBeA,EAjBQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAE/B,OACI,6BACKD,EAAQE,KAAI,SAAAC,GAAM,OACf,yBAAKC,IAAKD,EAAOE,IACZF,EAAOG,KADZ,KACoBH,EAAOI,OAD3B,IACmC,4BAC3BC,KAAK,SACLC,MAAON,EAAOE,GACdK,QAAST,GAHkB,gBCKpCU,EAXA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC1B,OACI,mDACuB,2BACfJ,MAAOG,EACPE,SAAUD,MCiBXE,EAtBI,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,WAAYC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBACjE,OACI,0BAAMC,SAAUL,GACZ,sCACU,2BACFP,MAAOQ,EACPH,SAAUI,KAGlB,wCACY,2BACJT,MAAOU,EACPL,SAAUM,KAGlB,6BACI,4BAAQZ,KAAK,UAAb,U,gBCjBVc,EAAU,eA6BD,EA1BA,WAMX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAoB9B,EAjBA,SAAAC,GAGX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAACtB,EAAIuB,GAGhB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBjB,GAAMuB,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACtB,GAEZ,OADgBkB,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BjB,IAC5BoB,MAAK,SAAAC,GAAQ,OAAIA,MCLrBM,EApBM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC7B,MAAgB,KAAZD,EACO,KACAC,EAEH,yBAAKC,UAAU,iBACVF,GAKL,yBAAKE,UAAU,iBACVF,ICsKFG,EA7KH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTrC,EADS,KACAsC,EADA,OAEcD,mBAAS,IAFvB,mBAETpB,EAFS,KAEAsB,EAFA,OAGkBF,mBAAS,IAH3B,mBAGTlB,EAHS,KAGEqB,EAHF,OAIoBH,mBAAS,IAJ7B,mBAITzB,EAJS,KAIG6B,EAJH,OAKwBJ,mBAAS,IALjC,mBAKTK,EALS,KAKKC,EALL,OAMmBN,oBAAS,GAN5B,mBAMTH,EANS,KAMKU,EANL,KAQhBC,qBAAU,WACRC,IAEGrB,MAAK,SAAAsB,GACJT,EAAWS,QAEd,IAGH,IA2HMC,EAAiBpC,EACnBZ,EAAQiD,QAAO,SAAAC,GAAO,OAAIA,EAAQ5C,KAAK6C,cAAcC,SAASxC,EAAWuC,kBACzEnD,EAEJ,OACE,6BACE,yCACA,kBAAC,EAAD,CAAciC,QAASS,EAAcR,aAAcA,IACnD,kBAAC,EAAD,CACEtB,WAAYA,EACZC,aAde,SAAAwC,GACnBZ,EAAcY,EAAMC,OAAO7C,UAgBzB,yCACA,kBAAC,EAAD,CACEO,WA1Ia,SAAAqC,GACjBA,EAAME,iBACN,IAAMC,EAAa,CACjBlD,KAAMW,EACNV,OAAQY,GAIJsC,EAAkBzD,EAAQiD,QAAO,SAAA9C,GAAM,OAAIA,EAAOG,OAASW,KAC3DyC,EAAQ1D,EAAQ2D,MAAK,SAAAC,GAAO,OAAIA,EAAQtD,OAASW,KAExB,IAA3BwC,EAAgBI,OACdC,OAAOC,QAAP,UAAkB9C,EAAlB,4EACF6B,EACUY,EAAMrD,GAAImD,GACjB/B,MAAK,SAAAuC,GAEJlB,IAEGrB,MAAK,SAAAsB,GACJT,EAAWS,GACXR,EAAW,IACXC,EAAa,IACbG,EAAgB,GAAD,OAAI1B,EAAJ,oBACfgD,YAAW,WACTtB,EAAgB,MACf,QAEJuB,OAAM,SAAAC,GACLC,QAAQC,IAAI,oCAGjBH,OAAM,SAAAI,GACL1B,GAAW,GACXD,EAAgB,kBAAD,OAAmB1B,EAAnB,0CACfgD,YAAW,WACTtB,EAAgB,MACf,QAKTG,EACUU,GACP/B,MAAK,SAAAuC,GACJzB,EAAW,IACXC,EAAa,IACbF,EAAWtC,EAAQuE,OAAOP,IAC1BpB,GAAW,GACXD,EAAgB,SAAD,OAAUa,EAAWlD,OACpC2D,YAAW,WACTtB,EAAgB,MACf,QAGJuB,OAAM,SAAAC,GACLC,QAAQC,IAAR,gBAAqBG,KAAKC,UAAUN,EAAIzC,SAASC,QAEjDiB,GAAW,GACXD,EAAgB,IAAD,OAAK6B,KAAKC,UAAUN,EAAIzC,SAASC,MAAjC,MACfsC,YAAW,WACTtB,EAAgB,MACf,SA6EL1B,QAASA,EACTC,cArCgB,SAAAmC,GACpBd,EAAWc,EAAMC,OAAO7C,QAqCpBU,UAAWA,EACXC,gBAnCkB,SAAAiC,GACtBb,EAAaa,EAAMC,OAAO7C,UAqCxB,uCACA,kBAAC,EAAD,CACET,QAASgD,EACT/C,cA/EgB,SAAAoD,GACpBA,EAAME,iBAIN,IAAImB,EAAa1E,EAAQ2D,MAAK,SAAAxD,GAAM,OAAIA,EAAOE,KAAOgD,EAAMC,OAAO7C,SAGhDqD,OAAOC,QAAP,iBAAyBW,EAAWpE,QAKrDwC,EACUO,EAAMC,OAAO7C,OACpBgB,MAAK,SAAAkD,GAGJ7B,IAEGrB,MAAK,SAAAsB,GACJT,EAAWS,SAGhBmB,OAAM,SAAAI,GACLF,QAAQC,IAAI,gBCjHtBO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.119557e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst DisplayContact = ({ persons, removeContact }) => {\n\n    return (\n        <div >\n            {persons.map(person =>\n                <div key={person.id}>\n                    {person.name}: {person.number} <button\n                        type=\"submit\"\n                        value={person.id}\n                        onClick={removeContact}>Delete</button>\n                </div>\n            )}\n\n        </div>\n    );\n};\n\nexport default DisplayContact;","import React from 'react';\n\nconst Filter = ({ showFilter, handleFilter }) => {\n    return (\n        <div>\n            Filter shown with: <input\n                value={showFilter}\n                onChange={handleFilter}\n            />\n        </div>\n    );\n};\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({ addContact, newName, handleNewName, newNumber, handleNewNumber }) => {\n    return (\n        <form onSubmit={addContact}>\n            <div>\n                Name: <input\n                    value={newName}\n                    onChange={handleNewName}\n                />\n            </div>\n            <div>\n                Number: <input\n                    value={newNumber}\n                    onChange={handleNewNumber}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">Add</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PersonForm;","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n\nconst getAll = () => {\n    // This returns response but we only need response.data\n    // return axios.get(baseUrl)\n    // We no longer return the promise returned by axios directly. Instead, \n    // we assign the promise to the request variable and call its then method\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    // return axios.post(baseUrl, newObject)\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    // return axios.put(`${baseUrl}/${id}`, newObject)\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react';\n\nconst Notification = ({ message, isSuccessful }) => {\n    if (message === '') {\n        return null\n    } else if (isSuccessful) {\n        return (\n            <div className=\"notifySuccess\">\n                {message}\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"notifyFailure\">\n                {message}\n            </div>\n        )\n    }\n\n\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport DisplayContact from \"./components/DisplayContact\"\nimport Filter from \"./components/Filter\"\nimport PersonForm from \"./components/PersonForm\"\nimport personsService from \"./services/personsService\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [showFilter, setShowFilter] = useState('')\n  const [notification, setNotification] = useState('')\n  const [isSuccessful, setSuccess] = useState(true) // this is used to select which notification class to use in Notification.js. Not efficient but it works, to be reviewed\n\n  useEffect(() => {\n    personsService\n      .getAll() // calls axios.get passing url, , returns response.data\n      .then(dbData => {\n        setPersons(dbData) // Assigns persons in db.json to persons\n      })\n  }, [])\n\n\n  const addContact = event => {\n    event.preventDefault()\n    const contactObj = {\n      name: newName,\n      number: newNumber\n    }\n\n    // Not so elegant, to be reviewed\n    const isNameDuplicate = persons.filter(person => person.name === newName);\n    const found = persons.find(element => element.name === newName);\n    // console.log(\"found id: \", found.id)\n    if (isNameDuplicate.length !== 0) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        personsService\n          .update(found.id, contactObj)\n          .then(returnedContact => {\n            // Fetch everything from db.json again, not efficient but re-render component immediately after .update\n            personsService\n              .getAll() // calls axios.get passing url, , returns response.data\n              .then(dbData => {\n                setPersons(dbData) // Assigns persons in db.json to persons\n                setNewName('')\n                setNewNumber('')\n                setNotification(`${newName} number updated`)\n                setTimeout(() => {\n                  setNotification('')\n                }, 3000);\n              })\n              .catch(err => {\n                console.log(\"Error, no data from server\")\n              })\n          })\n          .catch(error => {\n            setSuccess(false)\n            setNotification(`Information of ${newName} has already been removed from server`)\n            setTimeout(() => {\n              setNotification('')\n            }, 3000);\n          })\n\n      }\n    } else {\n      personsService\n        .create(contactObj)  // calls axios.post passing url and contactObj, returns response.data\n        .then(returnedContact => {\n          setNewName('')\n          setNewNumber('')\n          setPersons(persons.concat(returnedContact))\n          setSuccess(true)\n          setNotification(`Added ${contactObj.name}`)\n          setTimeout(() => {\n            setNotification('')\n          }, 3000);\n          // console.log(`${contactObj.name} added`)\n        })\n        .catch(err => {\n          console.log(`Here: ${JSON.stringify(err.response.data)}`)\n\n          setSuccess(false)\n          setNotification(` ${JSON.stringify(err.response.data)} `)\n          setTimeout(() => {\n            setNotification('')\n          }, 3000);\n        })\n    }\n\n\n  }\n\n  const removeContact = event => {\n    event.preventDefault()\n    // Change to name of the contact to be deleted!\n    // Remove Number() because id is generated as a number by DB\n    // console.log(persons.find(person => person.id === event.target.value))\n    let deleteThis = persons.find(person => person.id === event.target.value)\n    // console.log(`${deleteThis.name} TO BE removed`)\n\n    let delConfirmed = window.confirm(`Delete ${deleteThis.name}`)\n    // console.log(delConfirmed)\n    if (delConfirmed) {\n      // console.log(`remove ${event.target.value}`)\n\n      personsService\n        .remove(event.target.value)\n        .then(outcome => {\n          // console.log(outcome) // confirm deletion in console\n          // Fetch everything from db.json again, not efficient but re-render component immediately after .delete\n          personsService\n            .getAll() // calls axios.get passing url, , returns response.data\n            .then(dbData => {\n              setPersons(dbData) // Assigns persons in db.json to persons\n            })\n        })\n        .catch(error => {\n          console.log('fail')\n        })\n    }\n    // setNewName(' ')\n    // setPersons(persons)\n\n\n  }\n\n  const handleNewName = event => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = event => {\n    setNewNumber(event.target.value)\n  }\n\n  // Functionality changed to allow number updates\n  // const isNameDuplicate = persons.filter(person => person.name === newName);\n  // if (isNameDuplicate.length !== 0) {\n  //   window.alert(`${newName} is already added to phonebook`)\n  //   setNewName('')\n  // }\n\n\n  const handleFilter = event => {\n    setShowFilter(event.target.value)\n  }\n\n  const contactsToShow = showFilter\n    ? persons.filter(contact => contact.name.toLowerCase().includes(showFilter.toLowerCase()))\n    : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} isSuccessful={isSuccessful} />\n      <Filter\n        showFilter={showFilter}\n        handleFilter={handleFilter}\n      />\n\n      <h3>Add a new</h3>\n      <PersonForm\n        addContact={addContact}\n        newName={newName}\n        handleNewName={handleNewName}\n        newNumber={newNumber}\n        handleNewNumber={handleNewNumber}\n      />\n\n      <h3>Numbers</h3>\n      <DisplayContact\n        persons={contactsToShow}\n        removeContact={removeContact}\n      />\n\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}