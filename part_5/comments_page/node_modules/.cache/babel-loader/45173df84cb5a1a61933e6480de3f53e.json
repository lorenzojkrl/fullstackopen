{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/fullstack2020/part2/lesson/comments_page/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true); // Before creating noteService module --------------------------------\n  // 1) Using eventHandler\n  // useEffect(() => {\n  //     console.log('effect')\n  //     const eventHandler = response => {\n  //         console.log('promise fulfilled')\n  //         setNotes(response.data)\n  //     }\n  //     const promise = axios.get('http://localhost:3001/notes')\n  //     promise.then(eventHandler)\n  // }, [])\n  // 2) Using useEffect\n  // useEffect(() => {\n  //     console.log('effect')\n  //     axios\n  //         .get('http://localhost:3001/notes')\n  //         .then(response => {\n  //             console.log('promise fulfilled')\n  //             setNotes(response.data)\n  //         })\n  // }, [])\n  // console.log('render', notes.length, 'notes')\n  // 3) Rewriting useEffect\n  // const hook = () => {\n  //     console.log('effect')\n  //     axios\n  //         .get('http://localhost:3001/notes')\n  //         .then(response => {\n  //             console.log('promise fulfilled')\n  //             setNotes(response.data)\n  //         })\n  // }\n  // useEffect(hook, [])\n  // Before creating noteService module --------------------------------\n\n  const addNote = event => {\n    event.preventDefault(); // The default action submits a form & cause the page to reload.\n    // console.log('button clicked', event.target)\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1 // better to let the server generate ids for our resources\n\n    };\n    axios.post('http://localhost:3001/notes', noteObject).then(response => {\n      console.log(response);\n      setNotes(notes.concat(response.data));\n      setNewNote('');\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    // console.log('importance of ' + id + ' needs to be toggled')\n    const url = `http://localhost:3001/notes/${id}`; // unique url for each note resource based on its id.\n\n    const note = notes.find(n => n.id === id); // find the note we want to modify, and we then assign it to the note variable\n\n    const changedNote = { ...note,\n      important: !note.important\n    }; //reate a new object that is an exact copy of the old note, apart from the important property.\n\n    axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n    });\n  };\n\n  const handleNoteChange = event => {\n    // console.log(event.target.value)\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); //  === true is redundant because note.important is either true or false\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"show \", showAll ? 'important' : 'all')), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, notesToShow.map((note, i) => /*#__PURE__*/React.createElement(Note, {\n    key: i,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/fullstack2020/part2/lesson/comments_page/src/App.js"],"names":["React","useState","useEffect","axios","Note","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","id","length","post","then","response","console","log","concat","data","toggleImportanceOf","url","note","find","n","changedNote","put","map","handleNoteChange","target","value","notesToShow","filter","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\"\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n\n    // Before creating noteService module --------------------------------\n    // 1) Using eventHandler\n    // useEffect(() => {\n    //     console.log('effect')\n\n    //     const eventHandler = response => {\n    //         console.log('promise fulfilled')\n    //         setNotes(response.data)\n    //     }\n\n    //     const promise = axios.get('http://localhost:3001/notes')\n    //     promise.then(eventHandler)\n    // }, [])\n\n    // 2) Using useEffect\n    // useEffect(() => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }, [])\n    // console.log('render', notes.length, 'notes')\n\n    // 3) Rewriting useEffect\n    // const hook = () => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }\n    // useEffect(hook, [])\n\n\n    // Before creating noteService module --------------------------------\n    const addNote = event => {\n        event.preventDefault() // The default action submits a form & cause the page to reload.\n        // console.log('button clicked', event.target)\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1 // better to let the server generate ids for our resources\n        }\n\n        axios\n            .post('http://localhost:3001/notes', noteObject)\n            .then(response => {\n                console.log(response)\n                setNotes(notes.concat(response.data))\n                setNewNote('')\n            })\n\n    }\n\n    const toggleImportanceOf = id => {\n        // console.log('importance of ' + id + ' needs to be toggled')\n        const url = `http://localhost:3001/notes/${id}` // unique url for each note resource based on its id.\n        const note = notes.find(n => n.id === id) // find the note we want to modify, and we then assign it to the note variable\n        const changedNote = { ...note, important: !note.important } //reate a new object that is an exact copy of the old note, apart from the important property.\n\n        axios.put(url, changedNote).then(response => {\n            setNotes(notes.map(note => note.id !== id ? note : response.data))\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        // console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important) //  === true is redundant because note.important is either true or false\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}