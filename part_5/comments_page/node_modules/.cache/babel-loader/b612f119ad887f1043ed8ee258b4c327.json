{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/fullstackopen/part_5/comments_page/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null); // Before creating noteService module --------------------------------\n  // 1) Using eventHandler\n  // useEffect(() => {\n  //     console.log('effect')\n  //     const eventHandler = response => {\n  //         console.log('promise fulfilled')\n  //         setNotes(response.data)\n  //     }\n  //     const promise = axios.get('http://localhost:3001/notes')\n  //     promise.then(eventHandler)\n  // }, [])\n  // 2) Using useEffect\n  // useEffect(() => {\n  //     console.log('effect')\n  //     axios\n  //         .get('http://localhost:3001/notes')\n  //         .then(response => {\n  //             console.log('promise fulfilled')\n  //             setNotes(response.data)\n  //         })\n  // }, [])\n  // console.log('render', notes.length, 'notes')\n  // 3) Rewriting useEffect\n  // const hook = () => {\n  //     console.log('effect')\n  //     axios\n  //         .get('http://localhost:3001/notes')\n  //         .then(response => {\n  //             console.log('promise fulfilled')\n  //             setNotes(response.data)\n  //         })\n  // }\n  // useEffect(hook, [])\n  // After creating noteService module --------------------------------\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = event => {\n    event.preventDefault(); // The default action submits a form & cause the page to reload.\n    // console.log('button clicked', event.target)\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1 // better to let the server generate ids for our resources\n\n    }; // Before noteService module\n    // axios\n    //     .post('http://localhost:3001/notes', noteObject)\n    //     .then(response => {\n    //         console.log(response)\n    //         setNotes(notes.concat(response.data))\n    //         setNewNote('')\n    //     })\n\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    // console.log('importance of ' + id + ' needs to be toggled')\n    // const url = `http://localhost:3001/notes/${id}` // unique url for each note resource based on its id. Before noteService\n    const note = notes.find(n => n.id === id); // find the note we want to modify, and we then assign it to the note variable\n\n    const changedNote = { ...note,\n      important: !note.important\n    }; // create a new object that is an exact copy of the old note, apart from the important property.\n    // Before noteService\n    // axios.put(url, changedNote).then(response => {\n    //     setNotes(notes.map(note => note.id !== id ? note : response.data))\n    // })\n    // noteService\n    //     .update(id, changedNote)\n    //     .then(returnedNote => {\n    //         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    //     })\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      setErrorMessage(`Importance of '${note.content}' changed`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    });\n  };\n\n  const handleNoteChange = event => {\n    // console.log(event.target.value)\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); //  === true is redundant because note.important is either true or false\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(Notification, {\n    message: errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"show \", showAll ? 'important' : 'all')), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, notesToShow.map((note, i) => /*#__PURE__*/React.createElement(Note, {\n    key: i,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"save\")), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/fullstackopen/part_5/comments_page/src/App.js"],"names":["React","useState","useEffect","Note","noteService","Notification","Footer","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","getAll","then","initialNotes","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","id","length","create","returnedNote","concat","toggleImportanceOf","note","find","n","changedNote","update","map","catch","error","setTimeout","handleNoteChange","target","value","notesToShow","filter","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\"\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    // Before creating noteService module --------------------------------\n    // 1) Using eventHandler\n    // useEffect(() => {\n    //     console.log('effect')\n\n    //     const eventHandler = response => {\n    //         console.log('promise fulfilled')\n    //         setNotes(response.data)\n    //     }\n\n    //     const promise = axios.get('http://localhost:3001/notes')\n    //     promise.then(eventHandler)\n    // }, [])\n\n    // 2) Using useEffect\n    // useEffect(() => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }, [])\n    // console.log('render', notes.length, 'notes')\n\n    // 3) Rewriting useEffect\n    // const hook = () => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }\n    // useEffect(hook, [])\n\n\n    // After creating noteService module --------------------------------\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = event => {\n        event.preventDefault() // The default action submits a form & cause the page to reload.\n        // console.log('button clicked', event.target)\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1 // better to let the server generate ids for our resources\n        }\n\n        // Before noteService module\n        // axios\n        //     .post('http://localhost:3001/notes', noteObject)\n        //     .then(response => {\n        //         console.log(response)\n        //         setNotes(notes.concat(response.data))\n        //         setNewNote('')\n        //     })\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n\n    }\n\n    const toggleImportanceOf = id => {\n        // console.log('importance of ' + id + ' needs to be toggled')\n        // const url = `http://localhost:3001/notes/${id}` // unique url for each note resource based on its id. Before noteService\n        const note = notes.find(n => n.id === id) // find the note we want to modify, and we then assign it to the note variable\n        const changedNote = { ...note, important: !note.important } // create a new object that is an exact copy of the old note, apart from the important property.\n\n        // Before noteService\n        // axios.put(url, changedNote).then(response => {\n        //     setNotes(notes.map(note => note.id !== id ? note : response.data))\n        // })\n        // noteService\n        //     .update(id, changedNote)\n        //     .then(returnedNote => {\n        //         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        //     })\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Importance of '${note.content}' changed`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n\n    }\n\n    const handleNoteChange = (event) => {\n        // console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important) //  === true is redundant because note.important is either true or false\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}