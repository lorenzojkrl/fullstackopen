{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/fullstack2020/part2/lesson/comments_page/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Note from \"./components/Note\";\n\nconst App = props => {\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  useEffect(() => {\n    console.log('effect');\n    axios.get('http://localhost:3001/notes').then(response => {\n      console.log('promise fulfilled');\n      setNotes(response.data);\n    });\n  }, []);\n  console.log('render', notes.length, 'notes');\n\n  const addNote = event => {\n    event.preventDefault(); // The default action submits a form & cause the page to reload.\n\n    console.log('button clicked', event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); //  === true is redundant because note.important is either true or false\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"show \", showAll ? 'important' : 'all')), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, notesToShow.map(note => /*#__PURE__*/React.createElement(Note, {\n    key: note.id,\n    note: note,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/fullstack2020/part2/lesson/comments_page/src/App.js"],"names":["React","useState","useEffect","Note","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","console","log","axios","get","then","response","data","length","addNote","event","preventDefault","target","noteObject","content","date","Date","toISOString","important","Math","random","id","concat","handleNoteChange","value","notesToShow","filter","note","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Note from \"./components/Note\";\n\nconst App = (props) => {\n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\n        'a new note...'\n    )\n    const [showAll, setShowAll] = useState(true)\n\n    useEffect(() => {\n        console.log('effect')\n        axios\n            .get('http://localhost:3001/notes')\n            .then(response => {\n                console.log('promise fulfilled')\n                setNotes(response.data)\n            })\n    }, [])\n    console.log('render', notes.length, 'notes')\n\n\n    const addNote = (event) => {\n        event.preventDefault() // The default action submits a form & cause the page to reload.\n        console.log('button clicked', event.target)\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1,\n        }\n\n        setNotes(notes.concat(noteObject))\n        setNewNote('')\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important) //  === true is redundant because note.important is either true or false\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note key={note.id} note={note} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}