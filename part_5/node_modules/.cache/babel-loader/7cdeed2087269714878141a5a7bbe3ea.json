{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/back-end/part_5_new/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Blog from './components/Blog';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport BlogForm from './components/BlogForm';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [notification, setNotification] = useState({\n    message: null,\n    isSuccessful: true\n  });\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, []);\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []); // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login({\n        username,\n        password\n      }); // Save token in local storage\n\n      window.localStorage.setItem('loggedUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (exception) {\n      setNotification({\n        message: 'Wrong credentials',\n        isSuccessful: false\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    }\n  };\n\n  const addBlog = async newBlog => {\n    try {\n      const returnedBlog = await blogService.create(newBlog);\n      setBlogs(blogs.concat(returnedBlog));\n      setNotification({\n        message: `A new blog: ${newBlog.title} by ${newBlog.author}`,\n        isSuccessful: true\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    } catch (exception) {\n      setNotification({\n        message: `Title and Url are necessary`,\n        isSuccessful: false\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    }\n  }; // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n\n  if (user === null) {\n    return React.createElement(React.Fragment, null, React.createElement(Notification, {\n      message: notification,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(LoginForm, {\n      username: username,\n      setUsername: setUsername,\n      password: password,\n      setPassword: setPassword,\n      handleLogin: handleLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser');\n    setUser(null);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Notification, {\n    message: notification,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Blogs\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, user.name, \" logged-in\"), React.createElement(\"button\", {\n    onClick: cleanCredentials,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"log out\"), React.createElement(Togglable, {\n    buttonLabel: \"New Blog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(BlogForm, {\n    createBlog: addBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), blogs.map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/back-end/part_5_new/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","Blog","blogService","loginService","Notification","LoginForm","BlogForm","Togglable","App","blogs","setBlogs","user","setUser","notification","setNotification","message","isSuccessful","username","setUsername","password","setPassword","getAll","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","handleLogin","event","preventDefault","login","setItem","stringify","exception","setTimeout","addBlog","newBlog","returnedBlog","create","concat","title","author","cleanCredentials","removeItem","name","map","blog","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\n\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState({ message: null, isSuccessful: true })\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs(blogs)\n    )\n  }, [])\n\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login({\n        username, password,\n      })\n\n      // Save token in local storage\n      window.localStorage.setItem(\n        'loggedUser', JSON.stringify(user)\n      )\n\n      blogService.setToken(user.token)\n\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setNotification({ message: 'Wrong credentials', isSuccessful: false })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    }\n  }\n\n\n  const addBlog = async (newBlog) => {\n\n    try {\n      const returnedBlog = await blogService.create(newBlog)\n      setBlogs(blogs.concat(returnedBlog))\n      setNotification({ message: `A new blog: ${newBlog.title} by ${newBlog.author}`, isSuccessful: true })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    } catch (exception) {\n      setNotification({ message: `Title and Url are necessary`, isSuccessful: false })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    }\n\n  }\n\n\n  // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n  if (user === null) {\n    return (\n      <>\n        <Notification message={notification} />\n        <LoginForm\n          username={username}\n          setUsername={setUsername}\n          password={password}\n          setPassword={setPassword}\n          handleLogin={handleLogin}\n        />\n      </>\n    )\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser')\n    setUser(null)\n  }\n\n  return (\n    <div>\n      <Notification message={notification} />\n      <h2>Blogs</h2>\n      <p>{user.name} logged-in</p>\n      <button onClick={cleanCredentials}>log out</button>\n      <Togglable buttonLabel=\"New Blog\">\n        <BlogForm createBlog={addBlog} />\n      </Togglable>\n\n      {blogs.map(blog =>\n        <Blog key={blog.id} blog={blog} />\n      )}\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}