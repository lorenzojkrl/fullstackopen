{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/back-end/part_5_new/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Blog from './components/Blog';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport BlogForm from './components/BlogForm';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [notification, setNotification] = useState({\n    message: null,\n    isSuccessful: true\n  });\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, []);\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []); // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n\n  const handleLogin = async userObject => {\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login(userObject); // Save token in local storage\n\n      window.localStorage.setItem('loggedUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n    } catch (exception) {\n      setNotification({\n        message: 'Wrong credentials',\n        isSuccessful: false\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    }\n  };\n\n  const addBlog = async newBlog => {\n    try {\n      const returnedBlog = await blogService.create(newBlog);\n      setBlogs(blogs.concat(returnedBlog));\n      setNotification({\n        message: `A new blog: ${newBlog.title} by ${newBlog.author}`,\n        isSuccessful: true\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    } catch (exception) {\n      setNotification({\n        message: `Title and Url are necessary`,\n        isSuccessful: false\n      });\n      setTimeout(() => {\n        setNotification({\n          message: null\n        });\n      }, 5000);\n    }\n  }; //The useRef hook is used to create a blogFormRef ref, \n  // that is assigned to the Togglable component containing the creation blog form. \n  // The blogFormRef variable acts as a reference to the component. \n  // This hook ensures the same reference (ref) is kept throughout re-renders of the component. \n\n\n  const blogFormRef = useRef();\n\n  const blogForm = () => React.createElement(Togglable, {\n    buttonLabel: \"New Blog\",\n    ref: blogFormRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(BlogForm, {\n    createBlog: addBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })); // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n\n  if (user === null) {\n    return React.createElement(React.Fragment, null, React.createElement(Notification, {\n      message: notification,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(LoginForm, {\n      handleLogin: handleLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser');\n    setUser(null);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Notification, {\n    message: notification,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Blogs\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, user.name, \" logged-in\"), React.createElement(\"button\", {\n    onClick: cleanCredentials,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"log out\"), blogForm(), blogs.map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/back-end/part_5_new/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","useRef","Blog","blogService","loginService","Notification","LoginForm","BlogForm","Togglable","App","blogs","setBlogs","user","setUser","notification","setNotification","message","isSuccessful","getAll","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","handleLogin","userObject","login","setItem","stringify","exception","setTimeout","addBlog","newBlog","returnedBlog","create","concat","title","author","blogFormRef","blogForm","cleanCredentials","removeItem","name","map","blog","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\n\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState({ message: null, isSuccessful: true })\n\n\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs(blogs)\n    )\n  }, [])\n\n  useEffect(() => {\n    // Search for token in local storage\n    const loggedUserJSON = window.localStorage.getItem('loggedUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  // Using async/await allows to get the outcome of the request \n  // before moving forward\n  // e.g. login or show error message\n  const handleLogin = async (userObject) => {\n    try {\n      // server response (inc. token & user details) is saved to user\n      const user = await loginService.login(userObject)\n\n      // Save token in local storage\n      window.localStorage.setItem(\n        'loggedUser', JSON.stringify(user)\n      )\n\n      blogService.setToken(user.token)\n      setUser(user)\n\n    } catch (exception) {\n      setNotification({ message: 'Wrong credentials', isSuccessful: false })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    }\n  }\n\n\n  const addBlog = async (newBlog) => {\n\n    try {\n      const returnedBlog = await blogService.create(newBlog)\n      setBlogs(blogs.concat(returnedBlog))\n      setNotification({ message: `A new blog: ${newBlog.title} by ${newBlog.author}`, isSuccessful: true })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    } catch (exception) {\n      setNotification({ message: `Title and Url are necessary`, isSuccessful: false })\n      setTimeout(() => {\n        setNotification({ message: null })\n      }, 5000)\n    }\n\n  }\n\n  //The useRef hook is used to create a blogFormRef ref, \n  // that is assigned to the Togglable component containing the creation blog form. \n  // The blogFormRef variable acts as a reference to the component. \n  // This hook ensures the same reference (ref) is kept throughout re-renders of the component. \n\n  const blogFormRef = useRef()\n  const blogForm = () => (\n    <Togglable buttonLabel=\"New Blog\" ref={blogFormRef}>\n      <BlogForm createBlog={addBlog} />\n    </Togglable>\n  )\n\n  // Alternative to two return\n  // { user === null && loginForm() }\n  // { user !== null && noteForm() }\n\n  if (user === null) {\n    return (\n      <>\n        <Notification message={notification} />\n        <LoginForm handleLogin={handleLogin} />\n      </>\n    )\n  }\n\n  const cleanCredentials = () => {\n    window.localStorage.removeItem('loggedUser')\n    setUser(null)\n  }\n\n  return (\n    <div>\n      <Notification message={notification} />\n      <h2>Blogs</h2>\n      <p>{user.name} logged-in</p>\n      <button onClick={cleanCredentials}>log out</button>\n      {blogForm()}\n\n      {blogs.map(blog =>\n        <Blog key={blog.id} blog={blog} />\n      )}\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}