{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"0OAgBeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBACA,iBAEN,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCgBjC,EAxBA,WAEX,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAsB9B,EAnBA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB9B,EAdA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKb,UAAU,SACVa,ICOEC,EAdA,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIN,6BACA,uGCiJGC,EAtJH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KA6CdC,qBAAU,WACNC,IAEKzB,MAAK,SAAA0B,GACFT,EAASS,QAElB,IAEH,IAgEMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAEhC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcc,QAASc,IACvB,6BACI,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKO,EAAYE,KAAI,SAACtC,EAAMuC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBAtDX,SAAAa,GAGvB,IAAMd,EAAOyB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAWhD+B,EACYpB,EAAI6B,GACXlC,MAAK,SAAAmC,GACFlB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO4C,SAEtDC,OAAM,SAAAC,GACHd,EAAgB,SAAD,OACFhC,EAAKK,QADH,sCAGf0C,YAAW,WACPf,EAAgB,QACjB,QA4B6BgB,CAAmBhD,EAAKc,WAG5D,0BAAMmC,SArFE,SAAAC,GACZA,EAAMC,iBAEN,IAAMC,EAAa,CACf/C,QAASsB,EACT0B,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,GAC3B3C,GAAIW,EAAMiC,OAAS,GAYvBxB,EACYkB,GACP3C,MAAK,SAAAmC,GACFlB,EAASD,EAAMkC,OAAOf,IACtBhB,EAAW,SA+DX,2BACIgC,MAAOjC,EACPkC,SA7BS,SAACX,GAEtBtB,EAAWsB,EAAMY,OAAOF,UA6BhB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,QChJZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3aa82a5b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important'\n        : 'make important'\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n// export default {\n//     getAll: getAll,\n//     create: create,\n//     update: update\n// }\n// However, since both the property fields and the variable names in the object are the same, \n// it's enough to simply write the following in ES6 JavaScript:\n\n\nexport default { getAll, create, update }","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification;","import React from 'react';\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\"\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    // Before creating noteService module --------------------------------\n    // 1) Using eventHandler\n    // useEffect(() => {\n    //     console.log('effect')\n\n    //     const eventHandler = response => {\n    //         console.log('promise fulfilled')\n    //         setNotes(response.data)\n    //     }\n\n    //     const promise = axios.get('http://localhost:3001/notes')\n    //     promise.then(eventHandler)\n    // }, [])\n\n    // 2) Using useEffect\n    // useEffect(() => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }, [])\n    // console.log('render', notes.length, 'notes')\n\n    // 3) Rewriting useEffect\n    // const hook = () => {\n    //     console.log('effect')\n    //     axios\n    //         .get('http://localhost:3001/notes')\n    //         .then(response => {\n    //             console.log('promise fulfilled')\n    //             setNotes(response.data)\n    //         })\n    // }\n    // useEffect(hook, [])\n\n\n    // After creating noteService module --------------------------------\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = event => {\n        event.preventDefault() // The default action submits a form & cause the page to reload.\n        // console.log('button clicked', event.target)\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1 // better to let the server generate ids for our resources\n        }\n\n        // Before noteService module\n        // axios\n        //     .post('http://localhost:3001/notes', noteObject)\n        //     .then(response => {\n        //         console.log(response)\n        //         setNotes(notes.concat(response.data))\n        //         setNewNote('')\n        //     })\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n\n    }\n\n    const toggleImportanceOf = id => {\n        // console.log('importance of ' + id + ' needs to be toggled')\n        // const url = `http://localhost:3001/notes/${id}` // unique url for each note resource based on its id. Before noteService\n        const note = notes.find(n => n.id === id) // find the note we want to modify, and we then assign it to the note variable\n        const changedNote = { ...note, important: !note.important } // create a new object that is an exact copy of the old note, apart from the important property.\n\n        // Before noteService\n        // axios.put(url, changedNote).then(response => {\n        //     setNotes(notes.map(note => note.id !== id ? note : response.data))\n        // })\n        // noteService\n        //     .update(id, changedNote)\n        //     .then(returnedNote => {\n        //         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        //     })\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n\n    }\n\n    const handleNoteChange = (event) => {\n        // console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important) //  === true is redundant because note.important is either true or false\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}